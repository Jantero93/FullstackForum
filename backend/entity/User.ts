/** TypeORM */
import { Entity } from 'typeorm';
import {
  Column,
  CreateDateColumn,
  OneToMany,
  UpdateDateColumn,
  PrimaryGeneratedColumn
} from 'typeorm';

/** Entities */
import { Post } from './Post';
import { Topic } from './Topic';

/** Class validation */
import { Length } from 'class-validator';

export enum UserRole {
  ADMIN = 'admin',
  NORMAL = 'normal',
  BANNED = 'banned'
}

@Entity()
export class User {
  @PrimaryGeneratedColumn('uuid')
  id!: string;

  /** Autogenerated timestamp when user is created */
  @Column('timestamptz')
  @CreateDateColumn()
  created!: Date;

  /** Autogenerated timestamp when user is updated */
  @Column('timestamptz')
  @UpdateDateColumn()
  updated!: Date;

  /** User's username */
  @Column({ unique: true, nullable: false })
  @Length(3, 30, {
    message: 'Username length must be 3 - 20'
  })
  username!: string;

  /** Salted and hashed password */
  @Column({ nullable: false, select: false })
  passwordHash!: string;

  /** Role */
  @Column({
    type: 'enum',
    enum: UserRole,
    default: UserRole.NORMAL
  })
  role!: UserRole;

  /** Posts user has created */
  @OneToMany(() => Post, (post) => post.user)
  posts?: Post[];

  /** Topics user has created */
  @OneToMany(() => Topic, (topic) => topic.user)
  topics?: Topic[];
}
